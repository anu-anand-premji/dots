# Highlights the git commit message in red once the commit msg exceeds 50 characters.

# -------------------------------------------------------------------------------------------------------------------- #

# Define the function to color the git commit message
function color_git_commit_message() {
    # Get the current command line
    local command_line=$BUFFER

    # Check if the command is a git commit command
    if [[ $command_line == "git commit -m"* ]]; then
        # Get the length of the commit message
        local message_length=${#command_line}
        local message_start_index=15

        # Set the color to green if the length is less than or equal to 50 characters
        if [ $message_length -le 65 ]; then
            region_highlight+=("$message_start_index $(($message_length - 1)) fg=green")
        else # Set the color to red if the length is greater than 50 characters
            region_highlight+=("$message_start_index 64 fg=green")
            region_highlight+=("65 $(($message_length - 1)) fg=red")
        fi
    fi
}

# Bind the function to ZLE events.
ZLE_COLORED_FUNCTIONS=(
    self-insert
    delete-char
    backward-delete-char
    kill-word
    backward-kill-word
    up-line-or-history
    down-line-or-history
    beginning-of-history
    end-of-history
    undo
    redo
    yank
)

for f in $ZLE_COLORED_FUNCTIONS; do
    eval "$f() { zle .$f && color_git_commit_message } ; zle -N $f"
done

# create an expansion widget which mimics the original "expand-or-complete" (you can see the default setup using "zle -l -L")
zle -C orig-expand-or-complete .expand-or-complete _main_complete

# use the orig-expand-or-complete inside the colorize function (for some reason, using the ".expand-or-complete" widget doesn't work the same)
expand-or-complete() { builtin zle orig-expand-or-complete && color_git_commit_message }
zle -N expand-or-complete

# -------------------------------------------------------------------------------------------------------------------- #
