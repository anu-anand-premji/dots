# Set a custom BASH prompt

# Install a nerd font to render all the characters in this file correctly - https://github.com/ryanoasis/nerd-fonts

# -------------------------------------------------------------------------------------------------------------------- #

# Overview
# --------

# is_in_git_submodule() - print "[submodule]" if inside a git submodule
# is_pwd_read_only()    - show a  after $PWD, if $PWD is read only
# show_git_branch()     - print the current git branch, shows if HEAD detached
# show_git_stash()      - print the number of stashes, if any
# show_python_venv()    - disable prompt mangling in venv/bin/activate and print the python venv name, if active
# set_prompt()          - define a custom prompt using the above functions

# -------------------------------------------------------------------------------------------------------------------- #

# Show "[submodule]" if inside a git submodule

function is_in_git_submodule()
{
	[ ! -z "$(git rev-parse --show-superproject-working-tree 2>/dev/null)" ] && printf " [submodule]";
}

# -------------------------------------------------------------------------------------------------------------------- #

# Print a  after $PWD, if $PWD is read only

function is_pwd_read_only()
{
	[ ! -w "$PWD" ] && printf "";
}

# -------------------------------------------------------------------------------------------------------------------- #

# Function to parse and print the current git branch, shows if HEAD detached

function show_git_branch()
{
	if git rev-parse --git-dir > /dev/null 2>&1; then
		printf " $(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/') ";
	fi;
}

# -------------------------------------------------------------------------------------------------------------------- #

# Print the number of stashes, if any

function show_git_stash()
{
	if $(command git rev-parse --verify refs/stash >/dev/null 2>&1); then
		printf "  $(git stash list 2>/dev/null | wc -l)";
	fi
}

# -------------------------------------------------------------------------------------------------------------------- #


# Disable prompt mangling in venv/bin/activate and show the python venv name, if active

export VIRTUAL_ENV_DISABLE_PROMPT=1

function show_python_venv()
{
	if [[ -v VIRTUAL_ENV ]]; then
		printf " ${VIRTUAL_ENV##*/}\n\r"; # as trailing '\n' are trimmed, add a non-printing last char ('\r')
	fi
}

# -------------------------------------------------------------------------------------------------------------------- #

# Define a custom prompt using the above functions

function set_prompt()
{
	# Define consistent colours & styles that can be used to customize the prompt
	# Wrap tput output in \[ \] - helps bash to ignore non-printable characters and correctly calculate the prompt size.
	black="\[$(printf "\033[1;30m")\]";
	blue="\[$(printf "\033[1;34m")\]";
	bold="\[$(printf "\033[1m")\]";
	cyan="\[$(printf "\033[1;36m")\]";
	green="\[$(printf "\033[1;32m")\]";
	magenta="\[$(printf "\033[1;35m")\]";
	red="\[$(printf "\033[1;31m")\]";
	reset="\[$(printf "\033[0m")\]";
	white="\[$(printf "\033[1;37m")\]";
	yellow="\[$(printf "\033[1;33m")\]";

	# BASH prompt variables
	username='\u';
	hostname='\h ';
	pwd=' \w ';

    # Command substitution won't work inside PS1 without escaping the $ or by defining it in single quotes
	# This is because the command to be subsittuted is run once, when PS1 is first set, and never again.
	# https://wiki.archlinux.org/title/Bash/Prompt_customization

	PS1="\[\033]0;\W\007\]";                             # terminal title (set to the current working directory)
	PS1+="${bold}${red}\$(show_python_venv)${reset}";    # python venv
	PS1+='\n';                                           # newline
	PS1+="${bold}${green}${username}${reset}";           # username
	PS1+="${bold}${white}@${reset}";                     # @
	PS1+="${bold}${yellow}${hostname}${reset}";          # hostname
	PS1+="${bold}${cyan}${pwd}${reset}";                 # working directory full path
	PS1+="${bold}${red}\$(is_pwd_read_only)${reset}";    # read-only indicator
	PS1+="${bold}${magenta}\$(show_git_branch)${reset}"; # git branch name with git icon
	PS1+="${bold}${red}\$(show_git_stash)${reset}";      # number of git stashes with stash icon
	PS1+="${bold}${red}\$(is_in_git_submodule)${reset}"; # show "[submodule]" if inside a git submodule
	PS1+='\n';                                           # newline
	PS1+="${bold}${green}ﰲ ${reset}";                    # ﰲ
}

# Enable the custom shell prompt
set_prompt;

# -------------------------------------------------------------------------------------------------------------------- #
