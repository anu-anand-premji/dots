#!/bin/bash

#╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
#║ Set a custom BASH prompt                                                                                            ║
#║                                                                                                                     ║
#║ Install a nerd font to render all the characters in this file correctly - https://github.com/ryanoasis/nerd-fonts   ║
#╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

#╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
#║ Overview                                                                                                            ║
#║ -------                                                                                                             ║
#║ is_in_git_submodule() - print "[submodule]" if inside a git submodule                                               ║
#║ is_pwd_read_only()    - show a  after $PWD, if $PWD is read only                                                   ║
#║ show_git_branch()     - print the current git branch, shows if HEAD detached                                        ║
#║ show_git_stash()      - print the number of stashes, if any                                                         ║
#║ show_python_venv()    - disable prompt mangling in venv/bin/activate and print the python venv name, if active      ║
#║ set_prompt()          - define a custom prompt using the above functions                                            ║
#╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

# Show "[submodule]" if inside a git submodule

is_in_git_submodule()
{
    [ -n "$(git rev-parse --show-superproject-working-tree 2>/dev/null)" ] && printf " [submodule]";
}

# ════════════════════════════════════════════════════════════════════════════════════════════════════════════════════ #

# Print a  after $PWD, if $PWD is read only

is_pwd_read_only()
{
    [ ! -w "$PWD" ] && printf "";
}

# ════════════════════════════════════════════════════════════════════════════════════════════════════════════════════ #

# Parse and print the current git branch, shows if HEAD detached

show_git_branch()
{
    if command git rev-parse --git-dir > /dev/null 2>&1; then
        printf " %s" "$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/') ";
    fi;
}

# ════════════════════════════════════════════════════════════════════════════════════════════════════════════════════ #

# Print the number of stashes, if any

show_git_stash()
{
    if command git rev-parse --verify refs/stash >/dev/null 2>&1; then
        printf "  %s" "$(git stash list 2>/dev/null | wc -l)";
    fi
}

# ════════════════════════════════════════════════════════════════════════════════════════════════════════════════════ #


# Disable prompt mangling in venv/bin/activate and show the python venv name, if active

export VIRTUAL_ENV_DISABLE_PROMPT=1

show_python_venv()
{
    if [[ -v VIRTUAL_ENV ]]; then
        printf " %s\n\r" "${VIRTUAL_ENV##*/}"; # as trailing '\n' are trimmed, add a non-printing last char ('\r')
    fi
}

# ════════════════════════════════════════════════════════════════════════════════════════════════════════════════════ #

# Define a custom prompt using the above functions

set_prompt()
{
    # Define consistent colours & styles that can be used to customize the prompt
    normal=$(tput sgr0)
    bold=$(tput bold)
    blink=$(tput blink)
    reverse=$(tput smso)
    underline=$(tput smul)
    black=$(tput setaf 0)        #000000
    maroon=$(tput setaf 1)       #800000
    green=$(tput setaf 2)        #008000
    olive=$(tput setaf 3)        #808000
    navy=$(tput setaf 4)         #000080
    purple=$(tput setaf 5)       #800080
    teal=$(tput setaf 6)         #008080
    silver=$(tput setaf 7)       #c0c0c0
    gray=$(tput setaf 8)         #808080
    red=$(tput setaf 9)          #ff0000
    lime=$(tput setaf 10)        #00ff00
    yellow=$(tput setaf 11)      #ffff00
    blue=$(tput setaf 12)        #0000ff
    magenta=$(tput setaf 13)     #ff00ff
    aqua=$(tput setaf 14)        #00ffff
    white=$(tput setaf 15)       #ffffff

    # BASH prompt variables
    username=' \u';
    hostname='\h: ';
    pwd=' \w ';

    # Command substitution won't work inside PS1 without escaping the $ or by defining it in single quotes
    # This is because the command to be subsittuted is run once, when PS1 is first set, and never again.
    # https://wiki.archlinux.org/title/Bash/Prompt_customization

    PS1="\[\033]0;\W\007\]";                             # terminal title (set to the current working directory)
    PS1+="${bold}${red}\$(show_python_venv)${reset}";    # python venv
    PS1+='\n';                                           # newline
    PS1+="${bold}${green}${username}${reset}";           # username
    PS1+="${bold}${white}@${reset}";                     # @
    PS1+="${bold}${yellow}${hostname}${reset}";          # hostname
    PS1+="${bold}${cyan}${pwd}${reset}";                 # working directory full path
    PS1+="${bold}${red}\$(is_pwd_read_only)${reset}";    # read-only indicator
    PS1+="${bold}${magenta}\$(show_git_branch)${reset}"; # git branch name with git icon
    PS1+="${bold}${red}\$(show_git_stash)${reset}";      # number of git stashes with stash icon
    PS1+="${bold}${red}\$(is_in_git_submodule)${reset}"; # show "[submodule]" if inside a git submodule
    PS1+='\n';                                           # newline
    PS1+="${bold}${green}ﰲ ${reset}";                    # ﰲ
}

# Enable the custom shell prompt
set_prompt;

# ════════════════════════════════════════════════════════════════════════════════════════════════════════════════════ #
